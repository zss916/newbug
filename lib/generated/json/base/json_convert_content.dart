// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:newbug/core/network/model/black_item_entity.dart';
import 'package:newbug/core/network/model/check_order_entity.dart';
import 'package:newbug/core/network/model/config_entity.dart';
import 'package:newbug/core/network/model/home_cards_entity.dart';
import 'package:newbug/core/network/model/location_entity.dart';
import 'package:newbug/core/network/model/meida_list_item.dart';
import 'package:newbug/core/network/model/online_user_entity.dart';
import 'package:newbug/core/network/model/order_entity.dart';
import 'package:newbug/core/network/model/pay_entity.dart';
import 'package:newbug/core/network/model/people_entity.dart';
import 'package:newbug/core/network/model/private_msg_status_entity.dart';
import 'package:newbug/core/network/model/right.dart';
import 'package:newbug/core/network/model/tag_entity.dart';
import 'package:newbug/core/network/model/unread_data_entity.dart';
import 'package:newbug/core/network/model/upload_entity.dart';
import 'package:newbug/core/network/model/user_entity.dart';
import 'package:newbug/core/network/model/user_info.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler =
    void Function(Object error, StackTrace stackTrace);

extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(
    List<dynamic>? value, {
    EnumConvertFunction? enumConvert,
  }) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(
    dynamic value, {
    EnumConvertFunction? enumConvert,
  }) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(
    dynamic value, {
    EnumConvertFunction? enumConvert,
  }) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
          '$type unimplemented,you can try running the app again',
        );
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<BlackItemEntity>[] is M) {
      return data
              .map<BlackItemEntity>(
                (Map<String, dynamic> e) => BlackItemEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<CheckOrderEntity>[] is M) {
      return data
              .map<CheckOrderEntity>(
                (Map<String, dynamic> e) => CheckOrderEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ConfigEntity>[] is M) {
      return data
              .map<ConfigEntity>(
                (Map<String, dynamic> e) => ConfigEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ConfigHomeLikeTablist>[] is M) {
      return data
              .map<ConfigHomeLikeTablist>(
                (Map<String, dynamic> e) => ConfigHomeLikeTablist.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ConfigReportList>[] is M) {
      return data
              .map<ConfigReportList>(
                (Map<String, dynamic> e) => ConfigReportList.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ConfigGreetingList>[] is M) {
      return data
              .map<ConfigGreetingList>(
                (Map<String, dynamic> e) => ConfigGreetingList.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ConfigSysAccount>[] is M) {
      return data
              .map<ConfigSysAccount>(
                (Map<String, dynamic> e) => ConfigSysAccount.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ConfigHtml>[] is M) {
      return data
              .map<ConfigHtml>(
                (Map<String, dynamic> e) => ConfigHtml.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ConfigChatLvl>[] is M) {
      return data
              .map<ConfigChatLvl>(
                (Map<String, dynamic> e) => ConfigChatLvl.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ConfigPpvUnlockLvl>[] is M) {
      return data
              .map<ConfigPpvUnlockLvl>(
                (Map<String, dynamic> e) => ConfigPpvUnlockLvl.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<ConfigSvcConfig>[] is M) {
      return data
              .map<ConfigSvcConfig>(
                (Map<String, dynamic> e) => ConfigSvcConfig.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<HomeCardsEntity>[] is M) {
      return data
              .map<HomeCardsEntity>(
                (Map<String, dynamic> e) => HomeCardsEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<HomeCardsMatchList>[] is M) {
      return data
              .map<HomeCardsMatchList>(
                (Map<String, dynamic> e) => HomeCardsMatchList.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<LocationEntity>[] is M) {
      return data
              .map<LocationEntity>(
                (Map<String, dynamic> e) => LocationEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<MediaListItem>[] is M) {
      return data
              .map<MediaListItem>(
                (Map<String, dynamic> e) => MediaListItem.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<OnlineUserEntity>[] is M) {
      return data
              .map<OnlineUserEntity>(
                (Map<String, dynamic> e) => OnlineUserEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<OrderEntity>[] is M) {
      return data
              .map<OrderEntity>(
                (Map<String, dynamic> e) => OrderEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<PayEntity>[] is M) {
      return data
              .map<PayEntity>((Map<String, dynamic> e) => PayEntity.fromJson(e))
              .toList()
          as M;
    }
    if (<PayRight>[] is M) {
      return data
              .map<PayRight>((Map<String, dynamic> e) => PayRight.fromJson(e))
              .toList()
          as M;
    }
    if (<PayRights>[] is M) {
      return data
              .map<PayRights>((Map<String, dynamic> e) => PayRights.fromJson(e))
              .toList()
          as M;
    }
    if (<PayShops>[] is M) {
      return data
              .map<PayShops>((Map<String, dynamic> e) => PayShops.fromJson(e))
              .toList()
          as M;
    }
    if (<PeopleEntity>[] is M) {
      return data
              .map<PeopleEntity>(
                (Map<String, dynamic> e) => PeopleEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<PeopleMediaList>[] is M) {
      return data
              .map<PeopleMediaList>(
                (Map<String, dynamic> e) => PeopleMediaList.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<PrivateMsgStatusEntity>[] is M) {
      return data
              .map<PrivateMsgStatusEntity>(
                (Map<String, dynamic> e) => PrivateMsgStatusEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<Right>[] is M) {
      return data
              .map<Right>((Map<String, dynamic> e) => Right.fromJson(e))
              .toList()
          as M;
    }
    if (<TagEntity>[] is M) {
      return data
              .map<TagEntity>((Map<String, dynamic> e) => TagEntity.fromJson(e))
              .toList()
          as M;
    }
    if (<UnreadDataEntity>[] is M) {
      return data
              .map<UnreadDataEntity>(
                (Map<String, dynamic> e) => UnreadDataEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<UploadEntity>[] is M) {
      return data
              .map<UploadEntity>(
                (Map<String, dynamic> e) => UploadEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<UserEntity>[] is M) {
      return data
              .map<UserEntity>(
                (Map<String, dynamic> e) => UserEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<PartyItem>[] is M) {
      return data
              .map<PartyItem>((Map<String, dynamic> e) => PartyItem.fromJson(e))
              .toList()
          as M;
    }
    if (<Members>[] is M) {
      return data
              .map<Members>((Map<String, dynamic> e) => Members.fromJson(e))
              .toList()
          as M;
    }
    if (<BeardInfoType>[] is M) {
      return data
              .map<BeardInfoType>(
                (Map<String, dynamic> e) => BeardInfoType.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<BeardType>[] is M) {
      return data
              .map<BeardType>((Map<String, dynamic> e) => BeardType.fromJson(e))
              .toList()
          as M;
    }
    if (<MomentListModel>[] is M) {
      return data
              .map<MomentListModel>(
                (Map<String, dynamic> e) => MomentListModel.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<UserInfo>[] is M) {
      return data
              .map<UserInfo>((Map<String, dynamic> e) => UserInfo.fromJson(e))
              .toList()
          as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
        json.map((dynamic e) => e as Map<String, dynamic>).toList(),
      );
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (BlackItemEntity).toString(): BlackItemEntity.fromJson,
    (CheckOrderEntity).toString(): CheckOrderEntity.fromJson,
    (ConfigEntity).toString(): ConfigEntity.fromJson,
    (ConfigHomeLikeTablist).toString(): ConfigHomeLikeTablist.fromJson,
    (ConfigReportList).toString(): ConfigReportList.fromJson,
    (ConfigGreetingList).toString(): ConfigGreetingList.fromJson,
    (ConfigSysAccount).toString(): ConfigSysAccount.fromJson,
    (ConfigHtml).toString(): ConfigHtml.fromJson,
    (ConfigChatLvl).toString(): ConfigChatLvl.fromJson,
    (ConfigPpvUnlockLvl).toString(): ConfigPpvUnlockLvl.fromJson,
    (ConfigSvcConfig).toString(): ConfigSvcConfig.fromJson,
    (HomeCardsEntity).toString(): HomeCardsEntity.fromJson,
    (HomeCardsMatchList).toString(): HomeCardsMatchList.fromJson,
    (LocationEntity).toString(): LocationEntity.fromJson,
    (MediaListItem).toString(): MediaListItem.fromJson,
    (OnlineUserEntity).toString(): OnlineUserEntity.fromJson,
    (OrderEntity).toString(): OrderEntity.fromJson,
    (PayEntity).toString(): PayEntity.fromJson,
    (PayRight).toString(): PayRight.fromJson,
    (PayRights).toString(): PayRights.fromJson,
    (PayShops).toString(): PayShops.fromJson,
    (PeopleEntity).toString(): PeopleEntity.fromJson,
    (PeopleMediaList).toString(): PeopleMediaList.fromJson,
    (PrivateMsgStatusEntity).toString(): PrivateMsgStatusEntity.fromJson,
    (Right).toString(): Right.fromJson,
    (TagEntity).toString(): TagEntity.fromJson,
    (UnreadDataEntity).toString(): UnreadDataEntity.fromJson,
    (UploadEntity).toString(): UploadEntity.fromJson,
    (UserEntity).toString(): UserEntity.fromJson,
    (PartyItem).toString(): PartyItem.fromJson,
    (Members).toString(): Members.fromJson,
    (BeardInfoType).toString(): BeardInfoType.fromJson,
    (BeardType).toString(): BeardType.fromJson,
    (MomentListModel).toString(): MomentListModel.fromJson,
    (UserInfo).toString(): UserInfo.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}
